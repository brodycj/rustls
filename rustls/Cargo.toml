[package]
name = "rustls"
version = "0.23.20"
edition = "2021"
rust-version = "1.71"
license = "Apache-2.0 OR ISC OR MIT"
readme = "../README.md"
description = "Rustls is a modern TLS library written in Rust."
homepage = "https://github.com/rustls/rustls"
repository = "https://github.com/rustls/rustls"
categories = ["network-programming", "cryptography"]
autobenches = false
autotests = false
exclude = ["src/testdata", "tests/**"]
build = "build.rs"

[build-dependencies]
rustversion = { version = "1.0.6", optional = true }

[dependencies]
aws-lc-rs = { workspace = true, optional = true }
brotli = { workspace = true, optional = true }
brotli-decompressor = { workspace = true, optional = true }
hashbrown = { workspace = true, optional = true }
log = { workspace = true, optional = true }
# XXX TODO UPDATE `once_cell` ENTRY IN SEPARATE PR (IF NEEDED)
# once_cell is only required for no-std feature (this is also used with critical-section feature)
# XXX TODO CONFIRM OR REMOVE THIS STATEMENT: once_cell `alloc` feature is specified as ONLY required with `critical-section` feature;
# alloc & race features are only required in case of both no-std & critical-section NOT enabled
# XXX TBD ADD STATEMENT: looks like alloc implies race but need to reserach this further (seems to be not documented, potentially may not be true in the future)
once_cell = { workspace = true, default-features = false, features = ["alloc", "race"] }
# XXX GONE
# portable-atomic = { workspace = true, default-features = false, optional = true }
# portable-atomic-util = { workspace = true, default-features = false, optional = true }
ring = { workspace = true, optional = true }
subtle = { workspace = true }
webpki = { workspace = true }
pki-types = { workspace = true }
zeroize = { workspace = true }
zlib-rs = { workspace = true, optional = true }
# XXX GONE
# critical-section = { workspace = true, default-features = false, optional = true }

[features]
default = ["aws_lc_rs", "logging", "std", "tls12"]
std = ["webpki/std", "pki-types/std", "once_cell/std"]
logging = ["log"]
aws_lc_rs = ["dep:aws-lc-rs", "webpki/aws_lc_rs"]
aws-lc-rs = ["aws_lc_rs"] # Alias because Cargo features commonly use `-`
brotli = ["dep:brotli", "dep:brotli-decompressor", "std"]
ring = ["dep:ring", "webpki/ring"]
custom-provider = []
tls12 = []
read_buf = ["rustversion", "std"]
fips = ["aws_lc_rs", "aws-lc-rs?/fips"]
zlib = ["dep:zlib-rs"]
# XXX TODO ADD COMMENT(S) FOR STABLE VS UNSTABLE FEATURES
critical-section = [
    # XXX GONE
    # "dep:critical-section",
    # "dep:portable-atomic",
    # "dep:portable-atomic-util",
    # "once_cell/critical-section",
    # "portable-atomic/critical-section",
    # "portable-atomic-util/alloc",
]

[dev-dependencies]
base64 = { workspace = true }
bencher = { workspace = true }
env_logger = { workspace = true }
hex = { workspace = true }
log = { workspace = true }
macro_rules_attribute = { workspace = true }
num-bigint = { workspace = true }
rcgen = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
time = { workspace = true }
webpki-roots = { workspace = true }
x509-parser = { workspace = true }

[[bench]]
name = "benchmarks"
path = "benches/benchmarks.rs"
harness = false
required-features = ["ring"]

[[example]]
name = "test_ca"
path = "examples/internal/test_ca.rs"

[[test]]
name = "api"
path = "tests/runners/api.rs"

[[test]]
name = "api_ffdhe"
path = "tests/runners/api_ffdhe.rs"
required-features = ["tls12"]

[[test]]
name = "bogo"
path = "tests/bogo.rs"

[[test]]
name = "client_cert_verifier"
path = "tests/runners/client_cert_verifier.rs"

[[test]]
name = "ech"
path = "tests/ech.rs"

[[test]]
name = "key_log_file_env"
path = "tests/runners/key_log_file_env.rs"

[[test]]
name = "process_provider"
path = "tests/process_provider.rs"

[[test]]
name = "server_cert_verifier"
path = "tests/runners/server_cert_verifier.rs"

[[test]]
name = "unbuffered"
path = "tests/runners/unbuffered.rs"

[package.metadata.docs.rs]
# all non-default features except critical-section (uses portable-atomic-util) & fips (cannot build on docs.rs environment)
features = ["read_buf", "ring"]
rustdoc-args = ["--cfg", "docsrs"]

[package.metadata.cargo_check_external_types]
allowed_external_types = [
    "rustls_pki_types",
    "rustls_pki_types::*",
]
